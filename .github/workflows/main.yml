name: CI/CD Pipeline

on:
  push:
    branches: [ main, test-ci ]
  pull_request:
    branches: [ main, test-ci ]
  workflow_dispatch: # Allows manual trigger of the workflow for production deployment

permissions:
  contents: write
  deployments: write
  pull-requests: write
  statuses: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./SPM-MeeRebus
        run: npm install

      # Build the Vue app
      - name: Build the Vue app
        working-directory: ./SPM-MeeRebus
        run: npm run build

      # Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Deploy to Vercel (Preview) and capture DEPLOYMENT_URL
      - name: Deploy to Vercel (Preview)
        id: vercel_deploy
        if: github.ref == 'refs/heads/main'  # Deploy preview on main
        working-directory: ./SPM-MeeRebus
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          DEPLOYMENT_OUTPUT=$(vercel --token $VERCEL_TOKEN --yes --scope $VERCEL_ORG_ID) || true
          echo "Deployment Output: $DEPLOYMENT_OUTPUT"
          
          # Extract deployment URL from output
          DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -Eo 'https://[^ ]+\.vercel\.app')
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "Error: Deployment URL not found, exiting..."
            exit 1
          fi
          echo "Preview Deployment URL: $DEPLOYMENT_URL"
          echo "PREVIEW_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      # Install Python dependencies including pytest, selenium, and python-dotenv
      - name: Install Python dependencies
        run: |
          pip install pytest selenium python-dotenv

      # Install Chrome and Chromedriver for Selenium
      - name: Install Chrome and Chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb libxi6 libgconf-2-4

      # Run integration tests with Selenium
      - name: Run Selenium Tests
        working-directory: ./
        env:
          BASE_URL: ${{ env.PREVIEW_URL }}
        run: |
          echo "Testing with BASE_URL: $BASE_URL"
          pytest selenium-testing/
      
      # Deploy to Production after tests pass
      - name: Deploy to Production
        if: ${{ success() && github.ref == 'refs/heads/main' }} # Only deploy if tests pass and on the main branch
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Deploying to Production..."
          vercel --prod --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID --yes
